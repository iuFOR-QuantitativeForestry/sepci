#   Useful functions/commands for developing
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'
#   library(roxygen2) roxygenise()
#   library(Rdpack) viewRd("./man/martin_ek.Rd")
#   library(lintr) lint_dir()
#   library(devtools) build() build_vignettes()
#   install.packages('testthat') library(testthat)


#' Martin and Ek exponential weighting of relative diameters index
#'
#' @description
#' Competition index kernel for the siplab package \insertCite{siplab}{sepci}
#' implementing \insertCite{martinek;textual}{sepci}
#' competition index.
#'
#' @param imarks 	Marks for the subject plant, a 1-row data frame.
#' @param jmarks Data frame with marks for competitors
#' @param dists Vector of distances between the subject plant and the
#' competitors.
#' @param dranks 	Distance ranks.
#' @param par List of parameters.
#'
#' @details
#' The values of par are taken from the argument kerpar of pairwise(),
#' if not NULL.
#'
#' dbh_mark in par must be 1 if there is only one mark. If the marks are
#' a data frame, dbh_mark must be the number or name of the column with the
#' plant dbh.
#'
#' The effect of each tree j is computed following the formula:
#' \deqn{\frac{tree_jdbh}{tree_idbh}e^{16
#' \frac{distance(tree_i,tree_j)}{tree_idbh+tree_jdbh}}}
#'
#'
#' @return Numeric vector of length equal to the length of dists containing the
#' value of the effect of the competition of each the trees j over the tree i.
#'
#' @references \insertAllCited{}
#' @importFrom Rdpack reprompt
#'
#'
#' @export
#'
#' @examples
#' library(siplab)
#' me <- pairwise(valdepoza, maxR=10, kernel=martin_ek,
#' kerpar = list(dbh_mark = 1))
martin_ek <- function(imarks, jmarks, dists, dranks, par = list(dbh_mark = 1)) {

  dbh_mark <- par$dbh_mark
  idbh <- imarks[[dbh_mark]]
  jdbh <- jmarks[dbh_mark]
  return(jdbh / idbh * exp(16 * dists / (idbh + jdbh)))
}



#' Area of intersection of two circles
#'
#' @param d Distance of the centers
#' @param r1 Radius of first circle
#' @param r2 Radius of second circle
#'
#' @return Area of overlap
#' @noRd
intersection_of_circles <- function(d, r1, r2) {
  ans <- c()
  for (i in seq_along(d)) {
    if (d[i] > r1 + r2[i]) {
      # Circles don't intersect
      ans <- c(ans, 0)
    } else if (d[i] <= (r1 - r2[i]) && r1 >= r2[i]) {
      # Circle 2 inside circle 1
      ans <- c(ans, pi * r2[i]^2)
    } else if (d[i] <= (r2[i] - r1) && r2[i] >= r1) {
      # Circle 1 inside circle 2
      ans <- c(ans, pi * r1^2)
    } else {
      # Circles intersect
      lengthToCord <-  (r1^2 - r2[i]^2 + d[i]^2) / (2 * d[i])
      lengthToOtherCord <- d[i] -lengthToCord

      alpha <- acos(lengthToCord / r1) * 2
      beta <- acos(lengthToOtherCord / r2[i]) * 2

      areaSector1 <- r1 ^ 2 * alpha * 1 / 2
      areaSector2 <- r2[i] ^ 2  * beta * 1 / 2
      areaTriangle1 <- lengthToCord * sqrt(r1 ^ 2 - lengthToCord ^ 2)
      areaTriangle2 <- lengthToOtherCord * sqrt(r1 ^ 2 - lengthToCord ^ 2)
      areaSegment1 <- areaSector1 -areaTriangle1
      areaSegment2 <- areaSector2 -areaTriangle2
      ans <- c(ans, areaSegment1 + areaSegment2)
    }
  }
  return(ans)
}

#' Bella influence zone overlap index
#'
#'
#'#' @description
#' Competition index kernel for the siplab package \insertCite{siplab}{sepci}
#' implementing \insertCite{bella1971;textual}{sepci}
#' competition index.
#'
#' @param imarks 	Marks for the subject plant, a 1-row data frame.
#' @param jmarks Data frame with marks for competitors
#' @param dists Vector of distances between the subject plant and the
#' competitors.
#' @param dranks 	Distance ranks.
#' @param par List of parameters.
#'
#' @details
#' The values of par are taken from the argument kerpar of pairwise(),
#' if not NULL.
#'
#' The marks are a data frame, dbh_mark and largestCrownRadiusMark must be the
#' number or name of the column with the plant dbh and the largest crown radius
#' respectively. The areas of the influence zones are computed as circle areas.
#'
#' The effect of each tree j is computed following the formula:
#' \deqn{\frac{tree_jdbh* AreaOverlapInfluenceZones}
#' {tree_idbh * AreaInfluenceZoneTree_i}}
#'
#'
#' @return Numeric vector of length equal to the length of dists containing the
#' value of the effect of the competition of each the trees j over the tree i.
#'
#' @references \insertAllCited{}
#' @export
#'
#' @examples
#' library(siplab)
#' me <- pairwise(valdepoza, maxR=10, kernel=bella,
#' kerpar = list(dbh_mark = 1,largestCrownRadiusMark=5))
bella <- function(imarks, jmarks, dists, dranks,
                  par = list(dbh_mark = 1, largestCrownRadiusMark = 2)) {
  largest_crown_radius_mark <- par$largestCrownRadiusMark
  dbh_mark <- par$dbh_mark

  iradius <- imarks[[largest_crown_radius_mark]]
  idbh <- imarks[[dbh_mark]]
  jradius <- jmarks[largest_crown_radius_mark]
  jdbh <- jmarks[dbh_mark]
  return(intersection_of_circles(dists, iradius, t(jradius)) *
           jdbh / (pi * iradius^2 * idbh))
}



#' Alemdag growing space index
#'
#' Competition index using \insertCite{alemdag;textual}{sepci} potentially
#' available growing space measure to build and index as described in
#' \insertCite{dobbertin1992;textual}{sepci}
#'
#' @param imarks 	Marks for the subject plant, a 1-row data frame.
#' @param jmarks Data frame with marks for competitors
#' @param dists Vector of distances between the subject plant and the
#' competitors.
#' @param dranks 	Distance ranks.
#' @param par List of parameters.
#'
#' @details
#' The values of par are taken from the argument kerpar of pairwise(),
#' if not NULL.
#'
#' The marks are a data frame, dbh_mark must be the number or name of the column
#' with the plant dbh.
#'
#' The effect of each tree j is computed following the formula:
#' \deqn{\pi \left(\frac{dist_{ij}*tree_idbh}{tree_idbh+tree_jdbh}\right)
#' ^2\frac{\frac{tree_jdbh}
#' {dist_{ij}}}{\sum \frac{tree_jdbh}{dist_{ij}}}}
#'
#' @return Numeric vector of length equal to the length of dists containing the
#' value of the effect of the competition of each the trees j over the tree i.
#'
#' @references \insertAllCited{}
#' @export
#'
#' @examples
#' library(siplab)
#' me <- pairwise(valdepoza, maxR=10, kernel=alemdag,
#' kerpar = list(dbh_mark = 1))
alemdag <- function(imarks, jmarks, dists, dranks, par = list(dbh_mark = 1)) {
  dbh_mark <- par$dbh_mark
  idbh <- imarks[[dbh_mark]]
  jdbh <- jmarks[dbh_mark]
  first_term <- ((dists * idbh) / (idbh + jdbh)) ^ 2
  second_term <- (jdbh / dists) / sum(jdbh / dists)
  return(pi * first_term * second_term)
}


#' Point density index
#'
#' Competition index using
#' \insertCite{10.1093/forestscience/8.1.85;textual}{sepci} point
#' density measure
#'
#' @param imarks 	Marks for the subject plant, a 1-row data frame.
#' @param jmarks Data frame with marks for competitors
#' @param dists Vector of distances between the subject plant and the
#' competitors.
#' @param dranks 	Distance ranks.
#' @param par List of parameters.
#'
#' @details
#' The values of par are taken from the argument kerpar of pairwise(),
#' if not NULL.
#'
#' The marks are a data frame, dbh_mark must be the number or name of the column
#' with the plant dbh, subject_tree is a boolean indicating if the subject tree
#' has to be used in the density calculation.
#'
#' The effect of each tree j is computed following the formula
#' (excluding the subject tree):
#' \deqn{\frac{2500}{n} \sum_{j=1}^{n} (j-0.5)\frac{dbh_j}{dist_{ij}}}
#' or (including the subject tree):
#' \deqn{\frac{2500}{n} \sum_{j=1}^{n} (j+0.5)\frac{dbh_j}{dist_{ij}}}
#' where n is the number of competitors. When the
#' @return Numeric vector of length equal to the length of dists containing the
#' value of the effect of the competition of each the trees j over the tree i.
#'
#' @references \insertAllCited{}
#' @export
#'
#' @examples
#' library(siplab)
#' me <- pairwise(valdepoza, maxR=10, kernel=point_density,
#' kerpar = list(dbh_mark = 1, subject_tree = TRUE))
point_density <- function(imarks, jmarks, dists, dranks,
                          par = list(dbh_mark = 1, subject_tree = TRUE)) {
  dbh_mark <- par$dbh_mark
  subject_tree <- par$subject_tree
  jdbh <- jmarks[dbh_mark]
  order_dbh <- order(jdbh)
  jdbh <- jdbh[order_dbh]
  dists <- dists[order_dbh]

  n <- length(jdbh)
  j <- 1:n
  summatory <- 0
  if (subject_tree) {
    summatory <- sum(j - 0.5 * jdbh / dists)
  } else {
    summatory <- sum(j + 0.5 * jdbh / dists)
  }
  return(1 / n * summatory)
}






#' Crown cross sectional function kernel
#'
#' This function can be used to implement weighted by distance indexes based
#' on the crown cross sectional area, crown cross sectional volume or crown
#' cross sectional surface as described in
#' \insertCite{dobbertin1992;textual}{sepci}. It can also be used to
#' implement any distance weighted crown cross sectional index user may imagine.
#'
#' @param imarks 	Marks for the subject plant, a 1-row data frame.
#' @param jmarks Data frame with marks for competitors
#' @param dists Vector of distances between the subject plant and the
#' competitors.
#' @param dranks 	Distance ranks.
#' @param par List of parameters.
#'
#' @details
#' The values of par are taken from the argument kerpar of pairwise(),
#' if not NULL.
#'
#' The first two marks are column numbers of a mark data frame,
#' function_mark must be the number or name of the column with a function that
#' gives a trait of the tree at a given height (e.g cross sectional area),
#' height_tree_mark must be the number or name of the column that contains
#' the tree height. height_percentage is the percentage of the height of the
#' tree i that will be used to measure the cross functional trait of all
#' competitors.
#'
#' The effect of each tree j is computed following the formula
#' (f is the given function):
#' \deqn{\frac{f(tree_j)}{f(tree_i)*distance_{ij}}}
#'
#' @return Numeric vector of length equal to the length of dists containing the
#' value of the effect of the competition of each the trees j over the tree i.
#'
#' @import dplyr
#'
#' @export
#'
#' @examples
#' library(siplab)
#' library(dplyr)
#' # Using crown cross sectional volume
#' tree_csv_functions <- unlist(apply(valdepoza$marks,1,function(x){
#' return(function(y) {return(ccs_volume_ellipsoid(as.numeric(unlist(x[3])),
#'                                                 as.numeric(unlist(x[4])),
#'                                                 as.numeric(unlist(x[5])),
#'                                                 as.numeric(unlist(x[2])),
#'                                                 y))})}))
#' valdepoza$marks <- valdepoza$marks %>%
#' mutate(csFunction=tree_csv_functions)
#' pppiv <- pairwise(valdepoza, maxR = 10, kernel = crown_cross_fk,
#' kerpar = list(function_mark = 7,height_tree_mark = 2,height_percentage = 50))

crown_cross_fk <- function(imarks, jmarks, dists, dranks,
                           par = list(function_mark,
                                      height_tree_mark,
                                      height_percentage)) {

  function_mark <- par$function_mark
  height_tree_mark <- par$height_tree_mark
  height_percentage <- par$height_percentage
  i_function <- imarks[[function_mark]][[1]]
  i_height <- imarks[[height_tree_mark]]
  j_functions <- jmarks[function_mark]
  height_csf <- i_height * (height_percentage / 100)

  cross_sectional_i <- i_function(height_csf)
  cross_sectional_j <- apply(j_functions, 1, function(x) {
    x[[1]](height_csf)
  })

  return(cross_sectional_j / (cross_sectional_i * dists))
}


#' Crown cross sectional unweighted function kernel
#'
#' This function can be used to implement unweighted indexes based
#' on the crown cross sectional area, crown cross sectional volume or crown
#' cross sectional surface as described in
#' \insertCite{dobbertin1992;textual}{sepci}. It can also be used to
#' implement any unweighted crown cross sectional index user may imagine.
#'
#' @param imarks 	Marks for the subject plant, a 1-row data frame.
#' @param jmarks Data frame with marks for competitors
#' @param dists Vector of distances between the subject plant and the
#' competitors.
#' @param dranks 	Distance ranks.
#' @param par List of parameters.
#'
#' The height of the competitor tree were the functional trait is measured is
#' computed with an angle of value alpha from the base of the tree i. The effect
#'  of each tree j is computed following the formula (f is the given function):
#' \deqn{\frac{f(tree_j,alpha)}{f(tree_i)}}
#'
#' @return Numeric vector of length equal to the length of dists containing the
#' value of the effect of the competition of each the trees j over the tree i.
#'
#' @import dplyr
#' @importFrom siplab pairwise
#'
#' @export
#'
#' @examples
#' library(siplab)
#' library(dplyr)
#' # Using crown cross sectional volume
#' tree_csv_functions <- unlist(apply(valdepoza$marks,1,function(x){
#' return(function(y) {return(ccs_volume_ellipsoid(as.numeric(unlist(x[3])),
#' as.numeric(unlist(x[4])),
#' as.numeric(unlist(x[5])),
#' as.numeric(unlist(x[2])), y))})}))
#' valdepoza$marks <- valdepoza$marks %>%
#' mutate(csFunction=tree_csv_functions)
#' pppiv <- pairwise(valdepoza, maxR=10, kernel=crown_unweighted_cross_fk,
#' kerpar = list(function_mark = 7,height_tree_mark = 2,height_percentage = 50,
#'  alpha = 60))
crown_unweighted_cross_fk <- function(imarks, jmarks, dists, dranks,
                                      par = list(function_mark,
                                                 height_tree_mark,
                                                 height_percentage, alpha)) {

  function_mark <- par$function_mark
  height_tree_mark <- par$height_tree_mark
  height_percentage <- par$height_percentage
  alpha <- par$alpha

  i_function <- imarks[[function_mark]][[1]]
  i_height <- imarks[[height_tree_mark]]
  j_functions <- cbind(jmarks[function_mark], dists)
  colnames(j_functions) <- c("cs_function", "dists")

  height_csf <- i_height * (height_percentage / 100)

  cross_sectional_i <- i_function(height_csf)
  cross_sectional_j <- apply(j_functions, 1, function(x) {
    height_csf_j <- x$dists * tan(alpha / 2 * pi / 180)
    x$cs_function(height_csf_j)
  })

  return(cross_sectional_j / cross_sectional_i)
}
